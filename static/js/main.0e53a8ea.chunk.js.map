{"version":3,"sources":["styles/breakpoints.js","styles/theme.js","components/presentational/PlayArea/PlayArea.js","components/presentational/PlayArea/index.js","components/presentational/Card/CardDescription.js","components/presentational/Card/CardCategories.js","components/presentational/Card/Card.js","components/presentational/Card/index.js","components/presentational/GameBoard/GameBoard.js","components/presentational/GameBoard/index.js","state/GameState/actions.js","state/GameState/reducer.js","state/GameState/initialState.js","services/StarWarsDataService.js","state/GameState/helpers.js","state/GameState/GameState.js","components/container/GameBoardContainer/index.js","components/container/GameBoardContainer/GameBoardContainer.js","App.js","serviceWorker.js","index.js"],"names":["size","mobile","tablet","desktop","colors","gameState","win","text","background","lose","draw","unplayed","user","computer","StyledPlayArea","styled","div","theme","type","_","get","breakpoints","StyledPlayAreaScore","span","StyledPlayAreaScoreLabel","label","StyledPlayAreaScoreValue","PlayArea","children","score","ICON_MAP","StyledCardDescription","StyledCardDescriptionIcon","StyledCardDescriptionInfo","StyledCardDescriptionTitle","h1","CardDescription","title","info","className","map","infoItem","index","key","defaultProps","StyledCardCategories","StyledCardCategory","StyledCardCategoryLabel","StyledCardCategoryValue","CardCategories","categories","Object","entries","value","StyledCard","Card","data","STATE_MESSAGE","StyledGameBoard","SytledGameBoardStatus","props","stateProps","state","css","GameBoard","propType","PropTypes","oneOf","reducer","action","actions","count","loading","player","cards","sanitizeNumber","rawData","isNaN","Number","sanitizeStarshipsData","rawStarshipsData","rawStarshipData","name","starship_class","max_atmosphering_speed","cost_in_credits","Passengers","passengers","films","length","pageUrl","fetch","then","response","json","resource","startingPageUrl","this","getPageData","result","results","next","getAllPagesData","shuffleCards","sort","Math","random","splitCardsInHalf","pop","firstHalf","secondHalf","forEach","card","push","setStarWarsCards","setValue","a","starWarsDataService","getStarShips","shuffledCards","playerCards","computerCards","currentCard","GameStateContext","createContext","GameStateProvider","useReducer","initialState","initialValue","useState","useEffect","Provider","GameBoardContainer","useContext","App","defaultTheme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e53a8ea.chunk.js","sourcesContent":["const size = {\n\tmobile: \"320px\",\n\ttablet: \"768px\",\n\tdesktop: \"1024px\",\n};\n\nexport default {\n\tmobile: `(min-width: ${size.mobile})`,\n\ttablet: `(min-width: ${size.tablet})`,\n\tdesktop: `(min-width: ${size.desktop})`,\n};\n","const colors = {\n\twhite: \"#ffffff\",\n\tblack: \"#000000\",\n\tred: \"#FF9AA2\",\n\tdarkOrange: \"#FFB7B2\",\n\torange: \"#FFDAC1\",\n\tyellow: \"#FFFFD1\",\n\tlightGreen: \"#E2F0CB\",\n\tgreen: \"#B5EAD7\",\n\tblue: \"#a5d6f7\",\n};\n\nexport default {\n\tgameState: {\n\t\twin: {\n\t\t\ttext: colors.white,\n\t\t\tbackground: colors.green,\n\t\t},\n\t\tlose: {\n\t\t\ttext: colors.white,\n\t\t\tbackground: colors.red,\n\t\t},\n\t\tdraw: {\n\t\t\ttext: colors.black,\n\t\t\tbackground: colors.yellow,\n\t\t},\n\t\tunplayed: {\n\t\t\ttext: colors.black,\n\t\t\tbackground: colors.white,\n\t\t},\n\t},\n\tuser: {\n\t\tbackground: colors.blue,\n\t},\n\tcomputer: {\n\t\tbackground: colors.orange,\n\t},\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\n\nimport { breakpoints } from \"../../../styles\";\n\nconst StyledPlayArea = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\tposition: relative;\n\tjustify-content: center;\n\talign-items: center;\n\tbackground: ${({ theme, type }) =>\n\t\t_.get(theme, [type, \"background\"], \"white\")};\n\n\t@media ${breakpoints.tablet} {\n\t\tpadding: 0;\n\t\talign-items: center;\n\t}\n`;\n\nconst StyledPlayAreaScore = styled.span`\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tpadding: 8px;\n`;\n\nconst StyledPlayAreaScoreLabel = styled.label`\n\tfont-weight: 700;\n`;\n\nconst StyledPlayAreaScoreValue = styled.span`\n\tpadding: 0 8px;\n`;\n\nconst PlayArea = ({ children, type, score }) => (\n\t<StyledPlayArea type={type}>\n\t\t<StyledPlayAreaScore>\n\t\t\t<StyledPlayAreaScoreLabel>Score:</StyledPlayAreaScoreLabel>\n\t\t\t<StyledPlayAreaScoreValue>{score}</StyledPlayAreaScoreValue>\n\t\t</StyledPlayAreaScore>\n\t\t{children}\n\t</StyledPlayArea>\n);\n\nPlayArea.propTypes = {\n\ttype: PropTypes.string.isRequired,\n\tchildren: PropTypes.node,\n\tscore: PropTypes.number,\n};\n\nexport default PlayArea;\n","import PlayArea from \"./PlayArea\";\n\nexport default PlayArea;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport { breakpoints } from \"../../../styles\";\n\nconst ICON_MAP = {\n\tuser: \"fa-user\",\n\tcomputer: \"fa-robot\",\n};\n\nconst StyledCardDescription = styled.div`\n\tdisplay: flex;\n\tpadding: 8px 0;\n`;\n\nconst StyledCardDescriptionIcon = styled.div`\n\theight: 32px;\n\twidth: 32px;\n\tfont-size: 32px;\n\n\t@media ${breakpoints.tablet} {\n\t\theight: 48px;\n\t\twidth: 48px;\n\t\tfont-size: 48px;\n\t}\n`;\n\nconst StyledCardDescriptionInfo = styled.div`\n\tpadding: 0 8px;\n\ttext-align: right;\n\tfont-size: 14px;\n`;\n\nconst StyledCardDescriptionTitle = styled.h1`\n\tfont-size: 14px;\n\tline-height: 16px;\n\tfont-weight: 600;\n`;\n\nconst CardDescription = ({ title, info, type }) => (\n\t<StyledCardDescription>\n\t\t<StyledCardDescriptionIcon>\n\t\t\t<i className={`fa ${ICON_MAP[type]}`} />\n\t\t</StyledCardDescriptionIcon>\n\t\t<StyledCardDescriptionInfo>\n\t\t\t<StyledCardDescriptionTitle>{title}</StyledCardDescriptionTitle>\n\t\t\t{info.map((infoItem, index) => (\n\t\t\t\t<span key={index}>{infoItem}</span>\n\t\t\t))}\n\t\t</StyledCardDescriptionInfo>\n\t</StyledCardDescription>\n);\n\nCardDescription.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tinfo: PropTypes.arrayOf(PropTypes.string),\n\ttype: PropTypes.oneOf([\"user\", \"computer\"]).isRequired,\n};\n\nCardDescription.defaultProps = {\n\ttitle: \"\",\n\tinfo: [],\n};\n\nexport default CardDescription;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst StyledCardCategories = styled.div`\n\tpadding: 16px 0;\n`;\n\nconst StyledCardCategory = styled.div`\n\tdisplay: flex;\n\tpadding: 4px 0;\n\tmargin-bottom: 2px;\n\tjustify-content: space-between;\n\tborder: 1px #ccc solid;\n`;\n\nconst StyledCardCategoryLabel = styled.div`\n\tdisplay: block;\n\tpadding-left: 4px;\n`;\n\nconst StyledCardCategoryValue = styled.div`\n\twidth: auto;\n\tpadding-right: 4px;\n`;\n\nconst CardCategories = ({ categories }) => (\n\t<StyledCardCategories>\n\t\t{Object.entries(categories).map(([key, value], index) => (\n\t\t\t<StyledCardCategory key={index}>\n\t\t\t\t<StyledCardCategoryLabel>{key}</StyledCardCategoryLabel>\n\t\t\t\t<StyledCardCategoryValue>{value}</StyledCardCategoryValue>\n\t\t\t</StyledCardCategory>\n\t\t))}\n\t</StyledCardCategories>\n);\n\nCardCategories.defaultProps = {\n\tcategories: {},\n};\n\nCardCategories.propTypes = {\n\tcategories: PropTypes.object,\n};\n\nexport default CardCategories;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport { breakpoints } from \"../../../styles\";\nimport CardDescription from \"./CardDescription\";\nimport CardCategories from \"./CardCategories\";\n\nexport const StyledCard = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex: 1 0 0;\n\theight: 200px;\n\twidth: 100%;\n\tpadding: 0 16px;\n\tmargin: 0 16px;\n\tmax-width: 400px;\n\tborder-radius: 20px;\n\tbackground-color: white;\n\tborder: 1px solid #ccc;\n\tbox-shadow: 8px 5px 0 rgba(0, 0, 0, 0.3), 11px 10px 0 rgba(0, 0, 0, 0.22);\n\n\t@media ${breakpoints.tablet} {\n\t\theight: 400px;\n\t\tmax-width: 250px;\n\t}\n`;\n\nconst Card = ({ type, data }) => (\n\t<StyledCard>\n\t\t<CardDescription type={type} title={data.title} info={data.info} />\n\t\t<CardCategories categories={data.categories} />\n\t</StyledCard>\n);\n\nCard.propTypes = {\n\ttype: PropTypes.oneOf([\"user\", \"computer\"]),\n\tdata: PropTypes.shape({\n\t\ttitle: PropTypes.string,\n\t\tinfo: PropTypes.arrayOf(PropTypes.string),\n\t\tcategories: PropTypes.object,\n\t}),\n};\n\nCard.defaultProps = {\n\ttype: \"user\",\n\tdata: {\n\t\ttitle: \"\",\n\t\tcategories: {},\n\t\tinfo: [],\n\t},\n};\n\nexport default Card;\n","import Card from \"./Card\";\n\nexport default Card;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nimport { breakpoints } from \"../../../styles\";\n\nconst STATE_MESSAGE = {\n\tunplayed: \"?\",\n\twin: \"You Win!\",\n\tlose: \"You Lose!\",\n\tdraw: \"You Draw!\",\n};\n\nconst StyledGameBoard = styled.div`\n\tdisplay: flex;\n\tposition: relative;\n\tflex-direction: column;\n\theight: 100vh;\n\twidth: 100vw;\n\n\t@media ${breakpoints.tablet} {\n\t\tflex-direction: row;\n\t}\n`;\n\nconst SytledGameBoardStatus = styled.span`\n\tposition: absolute;\n\tdisplay: flex;\n\theight: 64px;\n\twidth: 64px;\n\ttop: calc(50% - 32px);\n\tleft: calc(50% - 32px);\n\tjustify-content: center;\n\talign-items: center;\n\ttext-align: center;\n\tborder: 1px solid #ccc;\n\tborder-radius: 50%;\n\tfont-weight: 900;\n\tbox-shadow: 1px 1px 0 rgba(0, 0, 0, 0.3), 2px 2px 0 rgba(0, 0, 0, 0.22);\n\n\t${(props) => {\n\t\tconst stateProps = _.get(props, [\"theme\", \"gameState\", props.state]);\n\n\t\treturn css`\n\t\t\tbackground-color: ${stateProps.background};\n\t\t\tcolor: ${stateProps.text};\n\t\t`;\n\t}};\n`;\n\nconst GameBoard = ({ children, state }) => (\n\t<StyledGameBoard>\n\t\t{children}\n\t\t<SytledGameBoardStatus state={state}>\n\t\t\t{STATE_MESSAGE[state]}\n\t\t</SytledGameBoardStatus>\n\t</StyledGameBoard>\n);\n\nGameBoard.propType = {\n\tstate: PropTypes.oneOf([\"win\", \"lose\", \"draw\", \"unplayed\"]),\n};\n\nGameBoard.defaultProps = {\n\tstate: \"unplayed\",\n};\n\nexport default GameBoard;\n","import GameBoard from \"./GameBoard\";\n\nexport default GameBoard;\n","export default {\n\tSET_LOADING: \"SET_LOADING\",\n};\n","import actions from \"./actions\";\n\nexport default function reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase actions.SET_LOADING:\n\t\t\treturn { ...state, count: action.value };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","export default {\n\tloading: true,\n\tplayer: {\n\t\tcards: [],\n\t},\n\tcomputer: {\n\t\tcards: [],\n\t},\n};\n","const BASE_URL = \"http://swapi.dev/api\";\n\nclass StarWarsDataService {\n\tgetPageData(pageUrl) {\n\t\treturn fetch(pageUrl).then((response) => response.json());\n\t}\n\n\tasync getAllPagesData(resource) {\n\t\tconst startingPageUrl = `${BASE_URL}/${resource}`;\n\t\tlet data = [];\n\t\tlet result = await this.getPageData(startingPageUrl);\n\t\tdata = [...data, ...result.results];\n\t\twhile (result.next) {\n\t\t\tresult = await this.getPageData(result.next);\n\t\t\tdata = [...data, ...result.results];\n\t\t}\n\t\treturn data;\n\t}\n\n\tgetStarShips() {\n\t\treturn this.getAllPagesData(\"starships\").then(this.sanitizeStarshipsData);\n\t}\n\n\tsanitizeNumber = (rawData) => {\n\t\tif (isNaN(rawData)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn Number(rawData);\n\t}\n\n\tsanitizeStarshipsData = (rawStarshipsData) => {\n\t\treturn rawStarshipsData.map((rawStarshipData) => ({\n\t\t\ttitle: rawStarshipData.name,\n\t\t\tinfo: [rawStarshipData.starship_class],\n\t\t\tcategories: {\n\t\t\t\t\"Max Speed\": this.sanitizeNumber(rawStarshipData.max_atmosphering_speed),\n\t\t\t\t\"Cost in Credits\": this.sanitizeNumber(rawStarshipData.cost_in_credits),\n\t\t\t\tPassengers: this.sanitizeNumber(rawStarshipData.passengers),\n\t\t\t\t\"Number of Films\": this.sanitizeNumber(rawStarshipData.films.length),\n\t\t\t},\n\t\t}));\n\t}\n}\n\nexport default new StarWarsDataService();\n","import { starWarsDataService } from \"../../services\";\n\nconst shuffleCards = (cards) => cards.sort(() => Math.random() - 0.5);\nconst splitCardsInHalf = (cards) => {\n\tif (cards.length % 2 === 1) {\n\t\tcards.pop();\n\t}\n\tconst firstHalf = [];\n\tconst secondHalf = [];\n\n\tcards.forEach((card, index) => {\n\t\tif (index % 2 === 0) {\n\t\t\tfirstHalf.push(card);\n\t\t} else {\n\t\t\tsecondHalf.push(card);\n\t\t}\n\t});\n\n\treturn [firstHalf, secondHalf];\n};\n\nexport const setStarWarsCards = async (value, setValue) => {\n\tconst cards = await starWarsDataService.getStarShips();\n\tconst shuffledCards = shuffleCards(cards);\n\tconst [playerCards, computerCards] = splitCardsInHalf(shuffledCards);\n\tsetValue({\n\t\t...value,\n\t\tloading: false,\n\t\tplayer: {\n\t\t\tcurrentCard: playerCards[0],\n\t\t\tcards: playerCards,\n\t\t},\n\t\tcomputer: {\n\t\t\tcurrentCard: computerCards[0],\n\t\t\tcards: computerCards,\n\t\t},\n\t});\n};\n","import React, { useState, useEffect, useReducer, createContext } from \"react\";\n\nimport reducer from \"./reducer\";\nimport initialState from \"./initialState\";\nimport actions from \"./actions\";\nimport { setStarWarsCards } from \"./helpers\";\n\nexport const GameStateContext = createContext({});\n\nexport function GameStateProvider({ children }) {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tconst initialValue = {\n\t\tloading: state.loading,\n\t\tplayer: state.player,\n\t\tcomputer: state.computer,\n\t};\n\tconst [value, setValue] = useState(initialValue);\n\n\tuseEffect(() => {\n\t\tsetStarWarsCards(value, setValue);\n\t}, []);\n\n\treturn (\n\t\t<GameStateContext.Provider value={value}>\n\t\t\t{children}\n\t\t</GameStateContext.Provider>\n\t);\n}\n","import GameBoardContainer from \"./GameBoardContainer\";\n\nexport default GameBoardContainer;\n","import React, { useContext } from \"react\";\n\nimport { PlayArea, Card, GameBoard } from \"../../presentational\";\nimport { GameStateContext } from \"../../../state\";\n\nexport default function GameBoardContainer() {\n\tconst { loading, player, computer } = useContext(GameStateContext);\n\n\tif (loading) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<GameBoard>\n\t\t\t<PlayArea type=\"user\" score={player.cards.length}>\n\t\t\t\t<Card type=\"user\" data={player.currentCard}></Card>\n\t\t\t</PlayArea>\n\t\t\t<PlayArea type=\"computer\" score={computer.cards.length}>\n\t\t\t\t<Card type=\"computer\" data={computer.currentCard}></Card>\n\t\t\t</PlayArea>\n\t\t</GameBoard>\n\t);\n}\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport { theme as defaultTheme } from \"./styles\";\nimport { GameBoardContainer } from \"./components/container\";\nimport { GameStateProvider } from \"./state\";\n\nconst App = () => (\n\t<ThemeProvider theme={defaultTheme}>\n\t\t<GameStateProvider>\n\t\t\t<GameBoardContainer />\n\t\t</GameStateProvider>\n\t</ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.scss\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}